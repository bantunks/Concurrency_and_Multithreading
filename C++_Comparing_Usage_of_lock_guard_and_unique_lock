1. https://isocpp.org/blog/2013/12/unique-lock
https://stackoverflow.com/questions/20516773/stdunique-lockstdmutex-or-stdlock-guardstdmutex

lock_guard and unique_lock are pretty much the same thing; lock_guard is a restricted version with a limited interface.
A lock_guard always holds a lock from its construction to its destruction. A unique_lock can be created without immediately locking, can unlock at any point in its existence, and can transfer ownership of the lock from one instance to another.
So you always use lock_guard, unless you need the capabilities of unique_lock. A condition_variable needs a unique_lock.

2. https://www.modernescpp.com/index.php/prefer-locks-to-mutexes

3. Barrier (computer science) -- https://en.wikipedia.org/wiki/Barrier_(computer_science)
[READ THE WHOLE WIKIPEDIA PAGE]
In parallel computing, a barrier is a type of synchronization method. A barrier for a group of threads or processes in the source code means any thread/process must stop at this point and cannot proceed until all other threads/processes reach this barrier.

4. Memory Barrier -- https://en.wikipedia.org/wiki/Memory_barrier
[READ THE WHOLE WIKIPEDIA PAGE]
A memory barrier, also known as a membar, memory fence or fence instruction, is a type of barrier instruction that causes a central processing unit (CPU) or compiler to enforce an ordering constraint on memory operations issued before and after the barrier instruction. This typically means that operations issued prior to the barrier are guaranteed to be performed before operations issued after the barrier.
